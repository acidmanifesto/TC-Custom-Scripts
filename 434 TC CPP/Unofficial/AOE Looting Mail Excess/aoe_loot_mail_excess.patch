From fad5dfae131118f703858dfaf502ffa9d2d90802 Mon Sep 17 00:00:00 2001
From: acidmanifesto <joshua.lee.betts@gmail.com>
Date: Thu, 7 Oct 2021 15:09:13 -0400
Subject: [PATCH 1/3] AOE Looting and Mailing Excess to Player.

This is a a attempt at a option core QOL (?) feature. Included is:
Conf to enable and to disabled the QOL.
AOE Looting (aka Mass Looting\MOP Looting) allows looting within a distance of 30 when NOT in a group.
Excess items are Mail to player when there is open spot in player inventory.
All items are looted. They are not Pick and chose when the conf is active.
This will be a limitation of the client \ core i assume.
Issues to not, When loot gets mailed to the player, it will do one message per a item. So at times the players inbox will be full due to client limitation and they will have to clear out some space and relog to refresh the remaining mail in the queue.
---
 .../game/AI/ScriptedAI/ScriptedCreature.h     |  6 ++
 src/server/game/Entities/Object/Object.cpp    | 12 +++
 src/server/game/Entities/Object/Object.h      |  3 +
 src/server/game/Entities/Player/Player.cpp    |  8 +-
 .../game/Grids/Notifiers/GridNotifiers.h      | 22 +++++
 src/server/game/Handlers/LootHandler.cpp      | 80 +++++++++++++++++--
 src/server/worldserver/worldserver.conf.dist  | 18 +++++
 7 files changed, 142 insertions(+), 7 deletions(-)

diff --git a/src/server/game/AI/ScriptedAI/ScriptedCreature.h b/src/server/game/AI/ScriptedAI/ScriptedCreature.h
index 54b0a840f7b2..6478ab587dac 100644
--- a/src/server/game/AI/ScriptedAI/ScriptedCreature.h
+++ b/src/server/game/AI/ScriptedAI/ScriptedCreature.h
@@ -425,6 +425,12 @@ inline void GetCreatureListWithEntryInGrid(Container& container, WorldObject* so
     source->GetCreatureListWithEntryInGrid(container, entry, maxSearchRange);
 }
 
+template <typename Container>
+inline void GetDeadCreatureListInGrid(Container& container, WorldObject* source, float maxSearchRange, bool alive = false)
+{
+    source->GetDeadCreatureListInGrid(container, maxSearchRange, alive);
+}
+
 template <typename Container>
 inline void GetGameObjectListWithEntryInGrid(Container& container, WorldObject* source, uint32 entry, float maxSearchRange)
 {
diff --git a/src/server/game/Entities/Object/Object.cpp b/src/server/game/Entities/Object/Object.cpp
index 8c691821b8ce..6acdb1aca86f 100644
--- a/src/server/game/Entities/Object/Object.cpp
+++ b/src/server/game/Entities/Object/Object.cpp
@@ -2377,6 +2377,14 @@ void WorldObject::GetCreatureListWithEntryInGrid(Container& creatureContainer, u
     Cell::VisitGridObjects(this, searcher, maxSearchRange);
 }
 
+template <typename Container>
+void WorldObject::GetDeadCreatureListInGrid(Container& creaturedeadContainer, float maxSearchRange, bool alive /*= false*/) const
+{
+    Trinity::AllDeadCreaturesInRange check(this, maxSearchRange, alive);
+    Trinity::CreatureListSearcher<Trinity::AllDeadCreaturesInRange> searcher(this, creaturedeadContainer, check);
+    Cell::VisitGridObjects(this, searcher, maxSearchRange);
+}
+
 template <typename Container>
 void WorldObject::GetPlayerListInGrid(Container& playerContainer, float maxSearchRange) const
 {
@@ -2832,6 +2840,10 @@ template TC_GAME_API void WorldObject::GetCreatureListWithEntryInGrid(std::list<
 template TC_GAME_API void WorldObject::GetCreatureListWithEntryInGrid(std::deque<Creature*>&, uint32, float) const;
 template TC_GAME_API void WorldObject::GetCreatureListWithEntryInGrid(std::vector<Creature*>&, uint32, float) const;
 
+template TC_GAME_API void WorldObject::GetDeadCreatureListInGrid(std::list<Creature*>&, float, bool) const;
+template TC_GAME_API void WorldObject::GetDeadCreatureListInGrid(std::deque<Creature*>&, float, bool) const;
+template TC_GAME_API void WorldObject::GetDeadCreatureListInGrid(std::vector<Creature*>&, float, bool) const;
+
 template TC_GAME_API void WorldObject::GetPlayerListInGrid(std::list<Player*>&, float) const;
 template TC_GAME_API void WorldObject::GetPlayerListInGrid(std::deque<Player*>&, float) const;
 template TC_GAME_API void WorldObject::GetPlayerListInGrid(std::vector<Player*>&, float) const;
diff --git a/src/server/game/Entities/Object/Object.h b/src/server/game/Entities/Object/Object.h
index 8d2c05a97b24..30641e0e410d 100644
--- a/src/server/game/Entities/Object/Object.h
+++ b/src/server/game/Entities/Object/Object.h
@@ -421,6 +421,9 @@ class TC_GAME_API WorldObject : public Object, public WorldLocation
         template <typename Container>
         void GetCreatureListWithEntryInGrid(Container& creatureContainer, uint32 entry, float maxSearchRange = 250.0f) const;
 
+        template <typename Container>
+        void GetDeadCreatureListInGrid(Container& creaturedeadContainer, float maxSearchRange, bool alive = false) const;
+
         template <typename Container>
         void GetPlayerListInGrid(Container& playerContainer, float maxSearchRange) const;
 
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 028849ef8fb3..0b0457b69e88 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -25549,7 +25549,13 @@ void Player::StoreLootItem(uint8 lootSlot, Loot* loot, GameObject* go)
 
     LootItem* item = loot->LootItemInSlot(lootSlot, this, &qitem, &ffaitem, &conditem);
 
-    if (!item)
+    if (sConfigMgr->GetBoolDefault("AOE.LOOT.enable", true))
+    {
+        //SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr); prevents error already loot from spamming
+        return;
+    }
+
+    else
     {
         SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr);
         return;
diff --git a/src/server/game/Grids/Notifiers/GridNotifiers.h b/src/server/game/Grids/Notifiers/GridNotifiers.h
index 0a624d8b4555..52eb13938b6e 100644
--- a/src/server/game/Grids/Notifiers/GridNotifiers.h
+++ b/src/server/game/Grids/Notifiers/GridNotifiers.h
@@ -1424,6 +1424,28 @@ namespace Trinity
             float m_fRange;
     };
 
+    class AllDeadCreaturesInRange
+    {
+    public:
+        AllDeadCreaturesInRange(WorldObject const* obj, float range, bool reqAlive = true) : _obj(obj), _range(range), _reqAlive(reqAlive) { }
+
+        bool operator()(Unit* unit) const
+        {
+            if (_reqAlive && unit->IsAlive())
+                return false;
+
+            if (!_obj->IsWithinDistInMap(unit, _range))
+                return false;
+
+            return true;
+        }
+
+    private:
+        WorldObject const* _obj;
+        float _range;
+        bool _reqAlive;
+    };
+
     class PlayerAtMinimumRangeAway
     {
     public:
diff --git a/src/server/game/Handlers/LootHandler.cpp b/src/server/game/Handlers/LootHandler.cpp
index 30171af3d6ee..d5acd67e2e96 100644
--- a/src/server/game/Handlers/LootHandler.cpp
+++ b/src/server/game/Handlers/LootHandler.cpp
@@ -18,6 +18,7 @@
 #include "WorldSession.h"
 #include "Common.h"
 #include "Corpse.h"
+#include "Config.h"
 #include "Creature.h"
 #include "GameObject.h"
 #include "Group.h"
@@ -85,15 +86,63 @@ void WorldSession::HandleAutostoreLootItemOpcode(WorldPacket& recvData)
     else
     {
         Creature* creature = GetPlayer()->GetMap()->GetCreature(lguid);
-
-        bool lootAllowed = creature && creature->IsAlive() == (player->getClass() == CLASS_ROGUE && creature->loot.loot_type == LOOT_PICKPOCKETING);
-        if (!lootAllowed || !creature->IsWithinDistInMap(_player, INTERACTION_DISTANCE))
+        if (!player->GetGroup() && sConfigMgr->GetBoolDefault("AOE.LOOT.enable", true))
         {
-            player->SendLootError(lguid, lootAllowed ? LOOT_ERROR_TOO_FAR : LOOT_ERROR_DIDNT_KILL);
-            return;
+            int i = 0;
+            float range = 30.0f;
+            Creature* c = nullptr;
+            std::vector<Creature*> creaturedie;
+            player->GetDeadCreatureListInGrid(creaturedie, range);
+            for (std::vector<Creature*>::iterator itr = creaturedie.begin(); itr != creaturedie.end(); ++itr)
+            {
+                c = *itr;
+                loot = &c->loot;
+
+                uint8 maxSlot = loot->GetMaxSlotInLootFor(player);
+                for (i = 0; i < maxSlot; ++i)
+                {
+                    if (LootItem* item = loot->LootItemInSlot(i, player))
+                    {
+                        if (player->AddItem(item->itemid, item->count))
+                        {
+                            player->SendNotifyLootItemRemoved(lootSlot);
+                            player->SendLootRelease(player->GetLootGUID());
+                        }
+                        else
+                        {
+                            player->SendItemRetrievalMail(item->itemid, item->count);
+                            player->GetSession()->SendAreaTriggerMessage("Your items has been mailed to you.");
+                        }
+                    }
+                }
+
+                // This if covers a issue with skinning being infinite by Aokromes
+                if (!creature->IsAlive())
+                {
+                    creature->AllLootRemovedFromCorpse();
+                }
+
+                loot->clear();
+
+                if (loot->isLooted() && loot->empty())
+                {
+                    c->RemoveFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE);
+                    c->AllLootRemovedFromCorpse();
+                }
+            }
+        }
+        else
+        {
+            bool lootAllowed = creature && creature->IsAlive() == (player->getClass() == CLASS_ROGUE && creature->loot.loot_type == LOOT_PICKPOCKETING);
+            if (!lootAllowed || !creature->IsWithinDistInMap(_player, INTERACTION_DISTANCE))
+            {
+                player->SendLootError(lguid, lootAllowed ? LOOT_ERROR_TOO_FAR : LOOT_ERROR_DIDNT_KILL);
+                return;
+            }
+
+            loot = &creature->loot;
         }
 
-        loot = &creature->loot;
     }
 
     player->StoreLootItem(lootSlot, loot, gameObject);
@@ -246,6 +295,25 @@ void WorldSession::HandleLootMoneyOpcode(WorldPacket& /*recvData*/)
         }
         else
         {
+            if (sConfigMgr->GetBoolDefault("AOE.LOOT.enable", true))
+            {
+                if (!player->GetGroup())
+                {
+                    float range = 30.0f;
+                    uint32 gold = 0;
+                    Creature* c = nullptr;
+                    std::vector<Creature*> creaturedie;
+                    player->GetDeadCreatureListInGrid(creaturedie, range);
+                    for (std::vector<Creature*>::iterator itr = creaturedie.begin(); itr != creaturedie.end(); ++itr)
+                    {
+                        c = *itr;
+                        loot = &c->loot;
+                        gold += loot->gold;
+                        loot->gold = 0;
+                    }
+                    loot->gold = gold;
+                }
+            }
             player->ModifyMoney(loot->gold);
             player->UpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_LOOT_MONEY, loot->gold);
 
diff --git a/src/server/worldserver/worldserver.conf.dist b/src/server/worldserver/worldserver.conf.dist
index 9c82fcb03582..f4633870dff6 100644
--- a/src/server/worldserver/worldserver.conf.dist
+++ b/src/server/worldserver/worldserver.conf.dist
@@ -4271,3 +4271,21 @@ Metric.ConnectionInfo = "127.0.0.1;8086;worldserver"
 Metric.OverallStatusInterval = 1
 
 ###################################################################################################
+
+###################################################################################################
+#AOE Looting and Mail Excess to Player#
+#######################################
+#
+#    AOE Looting and Mail Excess
+#        Enable this if you want to enable Area of effect with looting (MOP Feature)
+#        Excess items that is looted in will be mailed to the player
+#
+#    AOE.LOOT.enable
+#         Description: Enables Module
+#         Default:    0 - (Disabled)
+#                     1 - (Enabled)
+
+AOE.LOOT.enable = 1
+
+#
+###################################################################################################
\ No newline at end of file

From 32b1ed61a3956eaad33d3f781d97e380864bf762 Mon Sep 17 00:00:00 2001
From: acidmanifesto <joshua.lee.betts@gmail.com>
Date: Thu, 7 Oct 2021 17:05:00 -0400
Subject: [PATCH 2/3] corrected missing if statement

---
 src/server/game/Entities/Player/Player.cpp | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 0b0457b69e88..85ad0c90ab97 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -25549,16 +25549,19 @@ void Player::StoreLootItem(uint8 lootSlot, Loot* loot, GameObject* go)
 
     LootItem* item = loot->LootItemInSlot(lootSlot, this, &qitem, &ffaitem, &conditem);
 
-    if (sConfigMgr->GetBoolDefault("AOE.LOOT.enable", true))
-    {
-        //SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr); prevents error already loot from spamming
-        return;
-    }
+    if (!item)
+	{
+        if (sConfigMgr->GetBoolDefault("AOE.LOOT.enable", true))
+        {
+            //SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr); prevents error already loot from spamming
+            return;
+        }
 
-    else
-    {
-        SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr);
-        return;
+        else
+        {
+            SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr);
+            return;
+        }
     }
 
     if (!item->AllowedForPlayer(this))

From 5d0d8bee7bbf365a5c7046d9ec0c1d5b3368b506 Mon Sep 17 00:00:00 2001
From: acidmanifesto <joshua.lee.betts@gmail.com>
Date: Thu, 7 Oct 2021 17:18:22 -0400
Subject: [PATCH 3/3] tab to space

---
 src/server/game/Entities/Player/Player.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 85ad0c90ab97..1947189f9f12 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -25550,7 +25550,7 @@ void Player::StoreLootItem(uint8 lootSlot, Loot* loot, GameObject* go)
     LootItem* item = loot->LootItemInSlot(lootSlot, this, &qitem, &ffaitem, &conditem);
 
     if (!item)
-	{
+    {
         if (sConfigMgr->GetBoolDefault("AOE.LOOT.enable", true))
         {
             //SendEquipError(EQUIP_ERR_LOOT_GONE, nullptr, nullptr); prevents error already loot from spamming